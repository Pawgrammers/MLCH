
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html><body>
    <p id="notice"></p>

    <!-- 
        Decide what XML file to open depending on the title acronym.
        doc variable now only used to obtain proper title and list of acts/scenes.
    -->
    <% doc = Nokogiri::XML(File.open("FolgerDigitalTexts_XML_Complete/"+@acronym+".xml")) %>

    <!-- 
        Get title of play and display at top of page 
    -->
    <div class="script-title">
        <div id="Home-button">
            <a id="home" href="/">Home</a>
        </div>
        <div id="play-title">
            <p id="title"></p>
        </div>
        <% title = doc.css('title').first %>
        <script>
            document.getElementById('title').innerHTML = '<%= escape_javascript title.inner_text %>';
        </script>

    </div>


    <!-- 
        Set up navigation bar, toggle button, and save button
    -->
    <div class="script-side-bar">
        <div class="play-navigation">

            <!-- This button shows the play's synopsis -->
            <button class="nav-synopsis" id="synopsis-button">SYNOPSIS</button>

            <!-- This button shows the play's analytics -->
            <button class="nav-analytics" id="analytics-button">ANALYTICS</button>

            <!-- This button toggles the strikethrough edits' visibility -->
            <button class = "nav-synopsis" curState = "showing" id="viewToggle-button"> HIDE EDITS </button>

            <button class = "nav-analytics" id="save-button"> SAVE </button>
        
            <script>
                var toggleBtn = document.getElementById("viewToggle-button");
                toggleBtn.curState = "showing";
                toggleBtn.onclick = function() {
                    var words = Array.from(document.getElementsByClassName("word"));
                    var punctuation = Array.from(document.getElementsByClassName("punc"));
                    var directions = Array.from(document.getElementsByClassName("stage"));
                    var cuttableScript = words.concat(punctuation).concat(directions);
                    cuttableScript.forEach(function(word) {
                        if (toggleBtn.curState == "showing" && word.dataset.cut == "true") // User wishes to hide edit
                        {
                            word.style.display = 'none'
                        }
                        else //user wishes to show edits
                        {
                            word.style.display = 'initial'
                        }

                    })
                    //Change button text from Show to Hide or vice versa 
                    if (toggleBtn.curState == "hiding")  //wish to show edits
                    {
                        toggleBtn.curState = "showing"
                        toggleBtn.innerHTML = "HIDE EDITS"
                    } 
                    else if (toggleBtn.curState == "showing")    //wish to hide edits 
                    {
                        toggleBtn.curState = "hiding"
                        toggleBtn.innerHTML = "SHOW EDITS"
                    }
                    else 
                    {

                        throw new Error('Something is fucked up with the toggle button curState')
                    }
                }
             </script>
             <div class = "break"> </div>

            <!-- Create a button for each act and scene in the play -->
            <% currAct = 1 %>
            <% currScene = 1 %>
            <% currIndex = 1 %>
            <% acts= doc.css('//div1') %>
            <% acts.each do |act| %>
                <button class="nav-act" id="<%= escape_javascript "na" + currAct.to_s %>"><%= "ACT " + currAct.to_s %></button>
                <% currAct = currAct + 1 %>
                <% currScene = 1 %>
                <% scenes = Nokogiri::XML(act.to_s).css('//div2') %>
                <% scenes.each do |scene| %>
                    <button class="nav-scene" id="<%= escape_javascript "ns" + currIndex.to_s %>"><%= "SCENE " + currScene.to_s %></button>
                    <% currScene = currScene + 1 %>
                    <% currIndex = currIndex + 1 %>
                <% end%>
            <%end%>
        </div>
    </div>


    <!-- 
        The synopsis will show up here as a popup 
    -->  
    <div id="synopsis-modal" class="shown-modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div class="hidden-synopsis" id="hidden-synopsis"></div>
            <% synopsistext = doc.css('//div[type="synopsis"]').text %>
            <script>
                document.getElementById('hidden-synopsis').innerHTML = '<%= escape_javascript synopsistext %>';
            </script>
        </div>
    </div>


    <!-- 
        The analytics will show up here as a popup 
    -->
    <div id="analytics-modal" class="shown-modal">
        <div class="modal-content">
            <span class="close2">&times;</span>
            <div class="hidden-analytics" id="hidden-analytics"></div>
            <% analyticstext = "Total Lines: ????" %>
            <script>
                document.getElementById('hidden-analytics').innerHTML = '<%= escape_javascript analyticstext %>';
            </script>
        </div>
    </div>

    <script>
        document.querySelector(".script-main").addEventListener("mousedown", mouseDown, false);
        document.querySelector(".script-main").addEventListener("mouseover", mouseOver, false);
        document.querySelector(".script-main").addEventListener("mouseup", mouseUp, false);      

        down = false
        toCut = false
        parent = null
        speakerCut = true

        // all words will need to be printed within the div class "script-main"

        function mouseDown({ srcElement }) {
            if (srcElement.className == "word" || srcElement.className == "punc" ||
                srcElement.className == "stage") {
                    parent = srcElement.parentNode
                    startIndex = lowIndex = highIndex = Array.from(parent.children)
                                                             .indexOf(srcElement)
                    down = true
                    toCut = !(srcElement.dataset.cut.to_b)
            }
            else if (srcElement.className == "speaker") {
                parent = srcElement.parentNode
                lowIndex = Array.from(parent.children).indexOf(srcElement)
                highIndex = nextSpeaker(srcElement, lowIndex + 2)

                if (srcElement.dataset.cut == "true") {
                    toCut = false
                }
                else {
                    toCut = true
                }
                speakerCut = true
            }
        }

        function mouseOver({ srcElement }) {
            if (down) {
                // Clear previous highlighting
                Array.from(parent.children).slice(lowIndex, highIndex + 1).forEach(
                    function(element) {
                        element.style.backgroundColor = "#FFFFFF"
                    }
                )
                // Update selection
                if (srcElement.className == "word" || srcElement.className == "punc" ||
                    srcElement.className.indexOf("stage") !== -1) {
                        newIndex = Array.from(parent.children).indexOf(srcElement)
                        lowIndex = newIndex > startIndex ? startIndex : newIndex
                        highIndex = newIndex > startIndex ? newIndex : startIndex
                }
                // Highlight and decide on cutting or uncutting
                toCut = false
                Array.from(parent.children).slice(lowIndex, highIndex + 1).forEach(
                    function(element) {
                        if (element.className == "word" || element.className == "punc" ||
                            element.className == "stage"){
                                element.style.backgroundColor = "#B8D7FB";
                                if (element.dataset.cut == "false") {
                                    toCut = true
                                }
                        }
                    }
                )
            }
        }

        function mouseUp({ srcElement }) {
            if (lowIndex == highIndex) {
                srcElement.dataset.cut == "true" ? uncut(srcElement) : cut(srcElement)
            } else {
                Array.from(parent.children).slice(lowIndex, highIndex + 1).forEach(
                    function(element){
                        toCut ? cut(element) : uncut(element)
                    }
                )
            }
            newIndex = lowIndex = highIndex = startIndex = parent = null
            down = toCut = false
        }

        function cut(element) {
            if (element.className == "word" || element.className == "punc" ||
                element.className.indexOf("stage") !== -1 || (element.className == "speaker" && speakerCut == true)) {
                    element.style.color = "#D3D3D3"
                    element.style.textDecoration = "line-through"
                    element.dataset.cut = "true"
                    element.style.backgroundColor = '#FFFFFF'
                    speakerCut = false
            }
        }

        function uncut(element) {
            if (element.className == "word" || element.className == "punc" ||
                element.className.indexOf("stage") !== -1 || (element.className == "speaker" && speakerCut == true)) {
                    element.style.color = "#000000"
                    element.style.textDecoration = "none"
                    element.dataset.cut = "false"
                    element.style.backgroundColor = '#FFFFFF'
                    speakerCut = false
            }
        }

        function nextSpeaker(srcElement, startIndex) {
            items = Array.from(srcElement.parentNode.children).splice(startIndex)
            for (element of items) {
                if (element.className == "speaker" || element.className == "stage" || element.className == "sceneDiv" || element.className == "actDiv") {
                    return items.indexOf(element) + startIndex - 1 
                }
            }  
            return items.length - 1 + startIndex
        }

        // NOT CURRENTLY USED, LEFT FOR FUTURE INFO
        function doCut(clickedItem) {
            // act
            if (clickedItem.getAttribute("class") == "acthead") {
            //    if (clickedItem.tagName.toLowerCase() == "button") {
            //
            //        // Don't cut Acts
            //        var entireAct = document.getElementById("Div" + clickedItem.id);
            //        var allChildren = entireAct.getElementsByTagName("button");
            //        if (clickedItem.dataset.cut.toLowerCase() == "false") {
            //            for (var i = 0; i < allChildren.length; i++) {
            //                allChildren[i].style.color = "#D3D3D3";
            //                allChildren[i].style.textDecoration = "line-through";
            //                allChildren[i].dataset.cut = "true";
            //            }
            //            //clickedItem.style.color = "#D3D3D3";
            //            //clickedItem.style.textDecoration = "line-through";
            //            clickedItem.dataset.cut = "true";
            //        }
            //        // perform uncut
            //        else {
            //            for (var i = 0; i < allChildren.length; i++) {
            //                allChildren[i].style.color = "#000000";
            //                allChildren[i].style.textDecoration = "none";
            //                allChildren[i].dataset.cut = "false";
            //            }
            //            // clickedItem.style.color = "#000000";
            //            // clickedItem.style.textDecoration = "none";
            //            clickedItem.dataset.cut = "false";
            //        }
            //    }    
            }
            // scene
            else if (clickedItem.getAttribute("class") == "scenehead") {
            //    if (clickedItem.tagName.toLowerCase() == "button") {
            //        // perform cut
            //        var entireScene = document.getElementById("Div" + clickedItem.id);
            //        var allChildren = entireScene.getElementsByTagName("button");
            //        if (clickedItem.dataset.cut.toLowerCase() == "false") {
            //            for (var i = 0; i < allChildren.length; i++) {
            //                allChildren[i].style.color = "#D3D3D3";
            //                allChildren[i].style.textDecoration = "line-through";
            //                allChildren[i].dataset.cut = "true";
            //            }
            //            //clickedItem.style.color = "#D3D3D3";
            //            //clickedItem.style.textDecoration = "line-through";
            //            clickedItem.dataset.cut = "true";
            //        }
            //        // perform uncut
            //        else {
            //            for (var i = 0; i < allChildren.length; i++) {
            //                allChildren[i].style.color = "#000000";
            //                allChildren[i].style.textDecoration = "none";
            //                allChildren[i].dataset.cut = "false";
            //            }
            //            //clickedItem.style.color = "#000000";
            //            //clickedItem.style.textDecoration = "none";
            //            clickedItem.dataset.cut = "false";
            //        }
            //    }    
            }
            // stage
            else if (clickedItem.getAttribute("class") == "stage") {
                if (clickedItem.tagName.toLowerCase() == "button") {
                    if (clickedItem.dataset.cut.toLowerCase() == "false") {
                        clickedItem.style.color = "#D3D3D3";
                        clickedItem.style.textDecoration = "line-through";
                        clickedItem.dataset.cut = "true";
                    }
                    else {
                        clickedItem.style.color = "#000000";
                        clickedItem.style.textDecoration = "none";
                        clickedItem.dataset.cut = "false";
                    }
                }    
            }
            // line
            else if (clickedItem.getAttribute("class") == "word" || clickedItem.getAttribute("class") == "punc") {
                if (clickedItem.tagName.toLowerCase() == "button") {
                    if (clickedItem.dataset.cut.toLowerCase() == "false") {
                        clickedItem.style.color = "#D3D3D3";
                        clickedItem.style.textDecoration = "line-through";
                        clickedItem.dataset.cut = "true";
                    }
                    else {
                        clickedItem.style.color = "#000000";
                        clickedItem.style.textDecoration = "none";
                        clickedItem.dataset.cut = "false";
                    }
                }    
            }
        };
    </script>



    <script>
        /** 
         * This controls scene buttons in the navigation bar
         */
        var sceneButtons = document.getElementsByClassName("nav-scene");
        var sceneLength = sceneButtons.length;
        for (var i = 0; i < sceneLength; i++) {
            sceneButton = sceneButtons[i];
            sceneButton.addEventListener("click", showScene, false);
        }
        function showScene(scene) {
            var allScenes = document.getElementsByClassName("scenehead");
            for (var i = 0; i < allScenes.length; i++) {
                
                if (("n" + allScenes[i].id) == scene.target.id) {
                    allScenes[i].style.backgroundColor = "yellow";
                    window.location.hash = allScenes[i].id;
                }
                else {
                    allScenes[i].style.backgroundColor = "transparent";
                }
            }
            var allActs = document.getElementsByClassName("acthead");
            for (var i = 0; i < allActs.length; i++) {
                allActs[i].style.backgroundColor = "transparent";
            }
        }
        /** 
         * This controls act buttons in the navigation bar
         */
        var actButtons = document.getElementsByClassName("nav-act");
        var actLength = actButtons.length;
        for (var i = 0; i < actLength; i++) {
            actButton = actButtons[i];
            actButton.addEventListener("click", showAct, false);
        }
        function showAct(act) {
            var allActs = document.getElementsByClassName("acthead");
            for (var i = 0; i < allActs.length; i++) {
                if (("n" + allActs[i].id) == act.target.id) {
                    allActs[i].style.backgroundColor = "yellow";
                    window.location.hash = allActs[i].id;
                }
                else {
                    allActs[i].style.backgroundColor = "transparent";
                }
            }
            var allScenes = document.getElementsByClassName("scenehead");
            for (var i = 0; i < allScenes.length; i++) {
                allScenes[i].style.backgroundColor = "transparent";
            }
        }
        /** 
         * This controls the synopsis button in the navigation bar.
         */
        var modal = document.getElementById("synopsis-modal");
        var btn = document.getElementById("synopsis-button");
        var span = document.getElementsByClassName("close")[0];
        btn.onclick = function() {
            modal.style.display = "block";
        }
        span.onclick = function() {
            modal.style.display = "none";
        }
        /** 
         * This controls the analytics button in the navigation bar.
         */
        var modal2 = document.getElementById("analytics-modal");
        var btn2 = document.getElementById("analytics-button");
        var span2 = document.getElementsByClassName("close2")[0];
        btn2.onclick = function() {
            modal2.style.display = "block";
        }
        span2.onclick = function() {
            modal2.style.display = "none";
        }
        /**
         * This closes the modals if the user clicks outside of either 
         * the synopsis or analytics modal.
         */
        window.onclick = function(event) {
            if (event.target == modal2) {
                modal2.style.display = "none";
            }
            if (event.target == modal) {
                modal.style.display = "none";
            }
        } 
    </script>

        <form action="/plays/save" method="post" id="saveForm">
            <input type="hidden" name="authenticity_token" value="<%=form_authenticity_token%>">
            <input type="hidden" name="savedocument" value="">
            <input type="hidden" name="savetitle" value="">
            <input type="submit" style="visibility:hidden;" name="saveButton" value="Save">    
        </form>
          
    <!-- 
        Save button functionality.
        Get the contents of script-main and assign the values of the hidden form above to contain it.
        Simulate click on submit button to force the correct order of assignment and form submission.
    -->  
    <script>
        var saveBtn = document.getElementById("save-button")
        saveBtn.onclick = function() { 

            var fullScript = document.body.getElementsByClassName('script-main')[0].innerHTML
            var form = document.getElementById("saveForm")
            form.elements["savedocument"].value = fullScript
            url = window.location.href
            playName = /^http:\/\/localhost:3000\/plays\/(\w*)(?:#[s,a][\d]+)?$/.exec(url)[1]
            form.elements["savetitle"].value = playName
            // form.elements["savetitle"].value = document.getElementById('title').innerHTML
            form.elements["saveButton"].click()

        }
    </script>


    <!-- 
        Retrieve the preprocess or saved HTML and fill out script-main, and catch the case in which it is empty, which should never happen.
    -->
    <div class="script-main"> 
        
        <% if @provideddocument != "" %>
            <%= content_tag :div, class: "edited-script", data: {provideddocument: @provideddocument} do %>
            <% end %>
            <script>
                document.getElementsByClassName('script-main')[0].innerHTML = $('.edited-script').data('provideddocument')
            </script>
        <% else %>
            <script>
                console.log("error: provideddocument was empty. bad query.")
            </script>
   
        <% end %>
    </div>

</body></html>
